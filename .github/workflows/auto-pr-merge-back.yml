# .github/workflows/main-to-develop-sync.yml
name: Sync main → develop

on:
  pull_request:
  types: [ closed ]
  branches:
    - main            # main 브랜치에 PR이 닫힐 때

permissions:
  contents: write             # PR 생성·머지에 필요
  pull-requests: write        # "

jobs:
  sync:
    runs-on: ubuntu-latest

    # 조건: PR이 머지되었고, develop 브랜치으로부터의 PR merge가 아닌 경우
    if: >
      github.event.pull_request.merged == true &&
      github.event.pull_request.head.ref != 'develop'

    steps:
      - name: Checkout (develop base)
        uses: actions/checkout@v3
        with:
          ref: develop        # develop 을 기준으로 체크아웃
          fetch-depth: 0      # 모든 커밋 기록을 가져옴

      - name: Merge main into develop
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin main
          git merge --no-ff --no-edit origin/main

      - name: Create PR main → develop
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GH_TOKEN }}   # repo-scope PAT
          base: develop
          branch: sync/main-to-develop     # 임시 브랜치
          title: "chore: main → develop 자동 merge back"
          body: |
            자동 동기화 PR  
            (main 에서 develop 으로 변경 사항 병합)
          commit-message: "chore: sync main into develop"
          delete-branch: true              # 머지 후 자동 삭제

      - name: Auto-merge PR
        if: steps.cpr.outputs.pull-request-number != ''
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          pr_number="${{ steps.cpr.outputs.pull-request-number }}"
          # 필수 검사(워크플로우, 리뷰 등)가 끝나면 자동 머지
          gh pr merge "$pr_number" --merge --auto --delete-branch
